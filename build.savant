/*
 * Copyright (c) 2016-2017, Inversoft Inc., All Rights Reserved
 */
savantVersion = "1.0.0"

project(group: "com.inversoft.passport", name: "passport-php-client", version: "1.8.3", licenses: ["ApacheV2_0"]) {
  workflow {
    standard()
  }

  publishWorkflow {
    subversion(repository: "http://svn.inversoft.org/savant")
  }

  publications {
    main {
      publication(name: "passport-php-client", type: "zip", file: "build/passport-php-client.zip")
    }
  }
}

// Plugins
dependency = loadPlugin(id: "org.savantbuild.plugin:dependency:${savantVersion}")
file = loadPlugin(id: "org.savantbuild.plugin:file:${savantVersion}")
idea = loadPlugin(id: "org.savantbuild.plugin:idea:${savantVersion}")
release = loadPlugin(id: "org.savantbuild.plugin:release-git:${savantVersion}")

target(name: "clean", description: "Cleans build directory") {
  file.prune(dir: "build")
}

target(name: "int", description: "Releases a local integration build of the project") {

  file.copy(to: "build/php") {
    fileSet(dir: "src")
  }

  file.delete {
    fileSet(dir: "build", includePatterns: [~/passport-php-client.+\.zip/])
  }

  file.zip(file: "build/passport-php-client.zip") {
    fileSet(dir: "build/php", includePatterns: [])
  }
  dependency.integrate()
}

target(name: "idea", description: "Updates the IntelliJ IDEA module file") {
  idea.iml()
}

target(name: "setup-phpunit", description: "Setup PHP unit") {
  def download = 'wget https://phar.phpunit.de/phpunit.phar'.execute()
  download.consumeProcessOutput(System.out, System.err)
  download.waitFor()

  def chmod = 'chmod +x phpunit.phar'.execute()
  chmod.consumeProcessOutput(System.out, System.err)
  chmod.waitFor()

  def move = 'mv phpunit.phar /usr/local/bin/phpunit'.execute()
  move.consumeProcessOutput(System.out, System.err)
  move.waitFor()

  def chown = 'sudo chown root /usr/local/bin/phpunit'.execute()
  chown.consumeProcessOutput(System.out, System.err)
}

target(name: "test", description: "Runs the tests", dependsOn: "int") {
  def test = 'which phpunit'.execute().exitValue()
  if (test == 1) {
    println "Error. I can't run tests until you install PHPUNIT. Run 'sb setup-phpunit"
    exit
  }

  def proc = 'phpunit --bootstrap src/ tests/'.execute()
  proc.consumeProcessOutput(System.out, System.err)
}

target(name: "bundle", description: "Builds the project release bundle", dependsOn: "int") {
  // Copy the zip to the bundle directory
  file.prune(dir: "build/bundles/")
  file.mkdir(dir: "build/bundles")
  file.copy(to: "build/bundles") {
    fileSet(dir: "build", includePatterns: [~/passport-php-client\.zip/])
  }
}

target(name: "release", description: "Releases a full version of the project", dependsOn: ["int"]) {
  release.release()
}
